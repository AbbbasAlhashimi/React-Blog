In this Script, we created a Custom Hook to store all states and URL fetch requests.
We began by creating an additional component called "useFetch" and set the returned values to "{data, isPending, error}".
Instead of Blogs, and setBlogs useState values, we replaced them with data, and setData.
in the Home.js file, we returned the useFetch returned values [{data, isPending, error}] using the useFetch component
We had two methods to display output:

Method One) const {data, isPending, error} =useFetch('http://localhost:8000/blogs');
in this method, we called the data as specified in the useFetch component.

Method Two) const {data: blogs, isPending, error} =useFetch('http://localhost:8000/blogs');
in this method, we renamed the data as "blogs" which Could be renamed in the future to any title.

useFetch.js Script:
----------------------
import { useState, useEffect } from "react";

const useFetch = (url) =>{

    const [data, setData] = useState(null);
    const [isPending, setIsPending] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        setTimeout( () => {
          fetch(url)
          .then(res => { //Check the Connection
            if(!res.ok)
            {
              throw Error('Could not establish connection');
            }
            return res.json();
          })
          .then(data => { //the data here is not the useState .. it's just the same name and it will not affect the code.
            setData(data);
            setIsPending(false);
            setError(null);
          })
          .catch(err => {
            //console.log(err.message);
            setError(err.message);
            setIsPending(false);
          })
        }, 1000)
      }, [url]);

      return {data, isPending, error}

}

export default useFetch;

----------------------------------------------------------

Home.js Script:
------------------
import { useEffect, useState } from "react";
import BlogList from "./BlogList";
import useFetch from "./useFetch";

const Home = () => {
  const {data: blogs, isPending, error} =useFetch('http://localhost:8000/blogs');
  //const {data, isPending, error} =useFetch('http://localhost:8000/blogs');
  return (
    <div className="home">
      {error && <div> {error} </div>}
      {isPending && <div>  Loading ... </div>}
      {blogs && <BlogList blogs={blogs} />}
    </div>
  );
}

export default Home;