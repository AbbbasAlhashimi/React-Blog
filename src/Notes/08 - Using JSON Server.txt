To run the JSON file, we need to use the following code:
npx json-server --watch data/db.json --port 8000

In this Script, we began by setting the useState to "null" which will be its initial value until its fetched ffrom db.json.
Then called the "useEffect" Hook and passed the fetch request resource "http://localhost:8000/blogs".
Then we used the "then" Method and set the "res" response object connection followed by the data fetching statement "setBlogs(data);"
which in turn stores the returned values from data into setBlogs which stands for the changed "setBlogs" object values.

When thee fetch request is passed, the following code is launched " {blogs && <BlogList blogs={blogs} />}"

{blogs && ...}: This is a JavaScript expression using the logical AND operator (&&). In JavaScript, the logical
AND operator returns its second operand if the first operand is truthy; otherwise, it returns the first operand.

Home Script:
--------------
import { useEffect, useState } from "react";
import BlogList from "./BlogList";

const Home = () => {
  const [blogs, setBlogs] = useState(null)

  useEffect(() => {
    fetch('http://localhost:8000/blogs')
      .then(res => {
        return res.json();
      })
      .then(data => {
        setBlogs(data);
      })
  }, [])

  return (
    <div className="home">
      {blogs && <BlogList blogs={blogs} />}
    </div>
  );
}

export default Home;

--------------------------------------

BlogList.js Script:
---------------------
const BlogList = ({ blogs }) => {
    return (
      <div className="blog-list">
        {blogs.map(blog => (
          <div className="blog-preview" key={blog.id} >
            <h2>{ blog.title }</h2>
            <p>Written by { blog.author }</p>
          </div>
        ))}
      </div>
    );
  }

  export default BlogList;
